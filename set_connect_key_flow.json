[
    {
        "id": "9fbaf39c92cd5d0d",
        "type": "subflow",
        "name": "cot2xtopo",
        "info": "",
        "category": "",
        "in": [
            {
                "x": 250,
                "y": 90,
                "wires": [
                    {
                        "id": "c7e20961b319ace7"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 1080,
                "y": 210,
                "wires": [
                    {
                        "id": "433c993b493c7be1",
                        "port": 0
                    }
                ]
            }
        ],
        "env": [],
        "meta": {
            "module": "node-red-cot-pli-to-topo",
            "type": "parser",
            "version": "1.0.0",
            "author": "Paul Clifton <email: paul.clifton@clptak.com>",
            "desc": "Parses CoT message from a stream, parses for PLI messages for coordinates and callsign, and then sends a location to CalTopo using the API and connect key generated by team accounts",
            "keywords": "tak caltopo nodered sar topo atak itak",
            "license": "Apache-2.0"
        },
        "color": "#3FADB5",
        "inputLabels": [
            "CoT Stream"
        ],
        "outputLabels": [
            "https request status"
        ],
        "icon": "node-red/white-globe.svg"
    },
    {
        "id": "c7e20961b319ace7",
        "type": "switch",
        "z": "9fbaf39c92cd5d0d",
        "name": "",
        "property": "caltopoControl",
        "propertyType": "flow",
        "rules": [
            {
                "t": "true"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 370,
        "y": 90,
        "wires": [
            [
                "9930fca9a69e46da"
            ]
        ]
    },
    {
        "id": "9930fca9a69e46da",
        "type": "xml",
        "z": "9fbaf39c92cd5d0d",
        "name": "",
        "property": "payload",
        "attr": "",
        "chr": "",
        "x": 520,
        "y": 90,
        "wires": [
            [
                "9725a3ebeb11d302"
            ]
        ]
    },
    {
        "id": "9725a3ebeb11d302",
        "type": "function",
        "z": "9fbaf39c92cd5d0d",
        "name": "Set Topic",
        "func": "var payload = msg.payload;\nvar control = flow.get(\"control\");\nif (control == true) {\n    if(payload.event.detail[0].status !== undefined) {\n        if (payload.event.$.uid == null) {\n    //    msg.payload = payload;\n        msg.topic = \"otherwise\";\n    } else if (payload.event.detail[0].status[0].$.battery !== \"\") {\n        msg.topic = \"takuser\";\n    } else {\n        msg.topic = msg.topic;\n    }} else {msg.topic = \"otherwise\";\n        msg.payload = payload;}\n    }\n    else {msg.topic = 'otherwise'}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 670,
        "y": 90,
        "wires": [
            [
                "84c73423a1c26e40"
            ]
        ],
        "info": "This node sets a topic to id CoT messages with a battery status\nto weed out non-PLI CoT messages so the next Switch node can pick\nup only CoTs with a battery status."
    },
    {
        "id": "84c73423a1c26e40",
        "type": "switch",
        "z": "9fbaf39c92cd5d0d",
        "name": "",
        "property": "payload.event.detail[0].status[0].$.battery",
        "propertyType": "msg",
        "rules": [
            {
                "t": "nempty"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 840,
        "y": 90,
        "wires": [
            [
                "fbe2d6d61853c92f"
            ]
        ],
        "info": "Filters out non-EUD CoT messages."
    },
    {
        "id": "fbe2d6d61853c92f",
        "type": "change",
        "z": "9fbaf39c92cd5d0d",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "tak.callsign",
                "pt": "msg",
                "to": "payload.event.detail[0].contact[0].$.callsign",
                "tot": "msg"
            },
            {
                "t": "set",
                "p": "tak.battery",
                "pt": "msg",
                "to": "payload.event.detail[0].status[0].$.battery",
                "tot": "msg"
            },
            {
                "t": "set",
                "p": "tak.team",
                "pt": "msg",
                "to": "payload.event.detail[0].__group[0].$.name",
                "tot": "msg"
            },
            {
                "t": "set",
                "p": "tak.role",
                "pt": "msg",
                "to": "payload.event.detail[0].__group[0].$.role",
                "tot": "msg"
            },
            {
                "t": "set",
                "p": "tak.device",
                "pt": "msg",
                "to": "payload.event.detail[0].takv[0].$.device",
                "tot": "msg"
            },
            {
                "t": "set",
                "p": "tak.platform",
                "pt": "msg",
                "to": "payload.event.detail[0].takv[0].$.platform",
                "tot": "msg"
            },
            {
                "t": "set",
                "p": "tak.os",
                "pt": "msg",
                "to": "payload.event.detail[0].takv[0].$.os",
                "tot": "msg"
            },
            {
                "t": "set",
                "p": "tak.version",
                "pt": "msg",
                "to": "payload.event.detail[0].takv[0].$.version",
                "tot": "msg"
            },
            {
                "t": "set",
                "p": "topic",
                "pt": "msg",
                "to": "tak.callsign",
                "tot": "msg"
            },
            {
                "t": "set",
                "p": "tak.battery",
                "pt": "msg",
                "to": "payload.event.detail[0].status[0].$.battery",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 450,
        "y": 150,
        "wires": [
            [
                "ef5148694abf3ae1"
            ]
        ]
    },
    {
        "id": "ef5148694abf3ae1",
        "type": "function",
        "z": "9fbaf39c92cd5d0d",
        "name": "Convert to Array and Call Roster Names",
        "func": "// ENTER CalTopo Position API Key below:\n\nvar positionApi = flow.get(\"positionApi2\")//msg.positionApi//\"clptak\"; // See README for how to get the Position API\n                              // from your CalTopo Team Account\n\n\n//var positionApi = global.get(\"positionApi\");\nvar callsign1 = msg.tak.callsign;\nvar contact = msg.payload.event.detail[0].contact[0].$.callsign;\nvar location = msg.payload.event.point[0].$\nvar lat = location.lat\nvar lon = location.lon\nvar callsign = contact;//.split(\"-\")\nconst baseURL = \"https://caltopo.com/api/v1/position/report/\"+positionApi+\"?id=\";\nconst latURL = \"&lat=\";\nconst lonURL = \"&lng=\";\n\n/* USE THIS SECTION IF YOU NEED TO FILTURE THINGS OUT BASED ON CALLSIGN\nvar foundbadge = callsign.match(regexBadge);\nif (foundbadge != null) {\n    callsign = foundbadge[0];\n    msg.url = baseURL + callsign + latURL + lat + lonURL + lon;\n    msg.method = \"get\";\n    return msg;\n} else {};\n}*/\n\nmsg.url = baseURL + callsign + latURL + lat + lonURL + lon;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 730,
        "y": 150,
        "wires": [
            [
                "155006bc945616ab"
            ]
        ]
    },
    {
        "id": "155006bc945616ab",
        "type": "change",
        "z": "9fbaf39c92cd5d0d",
        "name": "Clean Up",
        "rules": [
            {
                "t": "delete",
                "p": "tak",
                "pt": "msg"
            },
            {
                "t": "delete",
                "p": "payload",
                "pt": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 530,
        "y": 210,
        "wires": [
            [
                "45fd473ad81f3786"
            ]
        ]
    },
    {
        "id": "45fd473ad81f3786",
        "type": "switch",
        "z": "9fbaf39c92cd5d0d",
        "name": "",
        "property": "url",
        "propertyType": "msg",
        "rules": [
            {
                "t": "nempty"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 670,
        "y": 210,
        "wires": [
            [
                "433c993b493c7be1"
            ]
        ]
    },
    {
        "id": "433c993b493c7be1",
        "type": "http request",
        "z": "9fbaf39c92cd5d0d",
        "name": "",
        "method": "GET",
        "ret": "txt",
        "paytoqs": false,
        "url": "",
        "persist": false,
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 830,
        "y": 210,
        "wires": [
            []
        ]
    },
    {
        "id": "3e14039fb6b60e5b",
        "type": "subflow:9fbaf39c92cd5d0d",
        "z": "0b36e4031c62503a",
        "g": "c4b086097bb752f1",
        "name": "",
        "x": 710,
        "y": 1290,
        "wires": [
            [
                "22a1d194d70fbde6"
            ]
        ]
    }
]
