{
    "id": "9fbaf39c92cd5d0d",
    "type": "subflow",
    "name": "cot2xtopo",
    "info": "<p>\r\n  Serializes\r\n  <a href=\"https://www.tak.gov\">Team Awareness Kit (TAK)</a> Cursor-on-Target\r\n  (CoT) as a location message to <a href=\"https://caltopo.com/\">CalTopo</a> using the API and connect key generated by team.\r\n</p>\r\n<h2>properties</h2>\r\n  <p>\r\n    The <b>connectKey</b> field is the \"Connect Key\" generated in Caltopo under the \"Trackables\" tab in the team account administration window.  If left blank, you can pass the key as a string with a <b><i>msg.connectKey</b></i> payload.\r\n  </p>\r\n  <p>\r\n    For more information on how to obtain a Connect Key, see <a href = \"https://training.caltopo.com/all_users/team-accounts/team-tracking\">CalTopo's Support Page</a> and scroll down to \"Trackable Devices\" -> \"Add Another Device\".\r\n<h3>Input</h3>\r\n  <dl class=\"message-properties\">\r\n    <dt>payload <span class=\"property-type\">string</span></dt>\r\n    <dd>CoT XML</dd>\r\n  </dl>\r\n  <p>\r\n    Use a Network node connected to a TAK Server (TCP IN) streaming CoT messages or to a networking listening to multicast traffic (UDP in).  Please refer to your TAK network configuration to properly set up the Network node to stream the CoT messages.\r\n  <h4>Example Input CoT XML:</h4>\r\n  <pre>\r\n    &lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;&lt;event version=&quot;2.0&quot; time=&quot;2022-10-05T05:>\r\n  </pre>\r\n  \r\n<h3>Outputs</h3>\r\n  <dl class=\"message-properties\">\r\n    <dt>payload <span class=\"property-type\">object</span></dt>\r\n    <dd>an http request to <a href=\"https://caltopo.com/\">CalTopo</a> from parsed CoT XML.</dd>\r\n  </dl>\r\n  \r\n  <h4>Example Output:</h4>\r\n  <pre>\r\n      https://caltopo.com/api/v1/position/report/[connectKey]?id={CoT_callsign]&lat=36.47375&lng=-118.85302\r\n  </pre>",
    "category": "",
    "in": [
        {
            "x": 380,
            "y": 300,
        "wires": [
                {
                    "id": "9930fca9a69e46da"
                }
            ]
        }
    ],
    "out": [
        {
            "x": 1020,
            "y": 480,
            "wires": [
                {
                    "id": "68a54dc05063b459",
                    "port": 0
                }
            ]
        }
    ],
    "env": [
        {
            "name": "connectKey",
            "type": "str",
            "value": "",
            "ui": {
                "type": "input",
                "opts": {
                    "types": [
                        "str",
                        "env"
                    ]
                }
            }
        }
    ],
    "meta": {
        "module": "node-red-cot-pli-to-topo",
        "type": "parser",
        "version": "1.0.0",
        "author": "Paul Clifton <email: paul.clifton@clptak.com>",
        "desc": "Parses CoT message from a stream, parses for PLI messages for coordinates and callsign, and then sends a location to CalTopo using the API and connect key generated by team accounts",
        "keywords": "tak caltopo nodered sar topo atak itak",
        "license": "Apache-2.0"
    },
    "color": "#3FADB5",
    "inputLabels": [
        "CoT Stream"
    ],
    "outputLabels": [
        "https 200"
    ],
    "icon": "node-red/white-globe.svg",
    "status": {
        "x": 820,
        "y": 540,
        "wires": [
            {
                "id": "433c993b493c7be1",
                "port": 0
            }
        ]
    },
    "flow": [
        {
            "id": "9930fca9a69e46da",
            "type": "xml",
            "z": "9fbaf39c92cd5d0d",
            "name": "",
            "property": "payload",
            "attr": "",
            "chr": "",
            "x": 580,
            "y": 300,
            "wires": [
                [
                    "9725a3ebeb11d302"
                ]
            ]
        },
        {
            "id": "9725a3ebeb11d302",
            "type": "function",
            "z": "9fbaf39c92cd5d0d",
            "name": "Set Topic",
            "func": "var payload = msg.payload;\nvar control = flow.get(\"control\");\nif (control == true) {\n    if(payload.event.detail[0].status !== undefined) {\n        if (payload.event.$.uid == null) {\n    //    msg.payload = payload;\n        msg.topic = \"otherwise\";\n    } else if (payload.event.detail[0].status[0].$.battery !== \"\") {\n        msg.topic = \"takuser\";\n    } else {\n        msg.topic = msg.topic;\n    }} else {msg.topic = \"otherwise\";\n        msg.payload = payload;}\n    }\n    else {msg.topic = 'otherwise'}\nreturn msg;",
            "outputs": 1,
            "noerr": 0,
            "initialize": "",
            "finalize": "",
            "libs": [],
            "x": 730,
            "y": 300,
            "wires": [
                [
                    "84c73423a1c26e40"
                ]
            ],
            "info": "This node sets a topic to id CoT messages with a battery status\nto weed out non-PLI CoT messages so the next Switch node can pick\nup only CoTs with a battery status."
        },
        {
            "id": "84c73423a1c26e40",
            "type": "switch",
            "z": "9fbaf39c92cd5d0d",
            "name": "PLI msg filter",
            "property": "payload.event.detail[0].status[0].$.battery",
            "propertyType": "msg",
            "rules": [
                {
                    "t": "nempty"
                }
            ],
            "checkall": "true",
            "repair": false,
            "outputs": 1,
            "x": 890,
            "y": 300,
            "wires": [
                [
                    "fbe2d6d61853c92f"
                ]
            ],
            "info": "Filters out non-EUD CoT messages."
        },
        {
            "id": "fbe2d6d61853c92f",
            "type": "change",
            "z": "9fbaf39c92cd5d0d",
            "name": "",
            "rules": [
                {
                    "t": "set",
                    "p": "tak.callsign",
                    "pt": "msg",
                    "to": "payload.event.detail[0].contact[0].$.callsign",
                    "tot": "msg"
                },
                {
                    "t": "set",
                    "p": "tak.battery",
                    "pt": "msg",
                    "to": "payload.event.detail[0].status[0].$.battery",
                    "tot": "msg"
                },
                {
                    "t": "set",
                    "p": "tak.team",
                    "pt": "msg",
                    "to": "payload.event.detail[0].__group[0].$.name",
                    "tot": "msg"
                },
                {
                    "t": "set",
                    "p": "tak.role",
                    "pt": "msg",
                    "to": "payload.event.detail[0].__group[0].$.role",
                    "tot": "msg"
                },
                {
                    "t": "set",
                    "p": "tak.device",
                    "pt": "msg",
                    "to": "payload.event.detail[0].takv[0].$.device",
                    "tot": "msg"
                },
                {
                    "t": "set",
                    "p": "tak.platform",
                    "pt": "msg",
                    "to": "payload.event.detail[0].takv[0].$.platform",
                    "tot": "msg"
                },
                {
                    "t": "set",
                    "p": "tak.os",
                    "pt": "msg",
                    "to": "payload.event.detail[0].takv[0].$.os",
                    "tot": "msg"
                },
                {
                    "t": "set",
                    "p": "tak.version",
                    "pt": "msg",
                    "to": "payload.event.detail[0].takv[0].$.version",
                    "tot": "msg"
                },
                {
                    "t": "set",
                    "p": "topic",
                    "pt": "msg",
                    "to": "tak.callsign",
                    "tot": "msg"
                },
                {
                    "t": "set",
                    "p": "tak.battery",
                    "pt": "msg",
                    "to": "payload.event.detail[0].status[0].$.battery",
                    "tot": "msg"
                }
            ],
            "action": "",
            "property": "",
            "from": "",
            "to": "",
            "reg": false,
            "x": 510,
            "y": 360,
            "wires": [
                [
                    "ef5148694abf3ae1"
                ]
            ]
        },
        {
            "id": "ef5148694abf3ae1",
            "type": "function",
            "z": "9fbaf39c92cd5d0d",
            "name": "Convert to Array and Call Roster Names",
            "func": "// ENTER CalTopo Position API Key below:\n\nvar connectKey = flow.get(\"connectKey2\")//msg.connectKey//\"clptak\"; // See README for how to get the Position API\n                              // from your CalTopo Team Account\n\n\n//var connectKey = global.get(\"connectKey\");\nvar callsign1 = msg.tak.callsign;\nvar contact = msg.payload.event.detail[0].contact[0].$.callsign;\nvar location = msg.payload.event.point[0].$\nvar lat = location.lat\nvar lon = location.lon\nvar callsign = contact;//.split(\"-\")\nconst baseURL = \"https://caltopo.com/api/v1/position/report/\"+connectKey+\"?id=\";\nconst latURL = \"&lat=\";\nconst lonURL = \"&lng=\";\n\n/* USE THIS SECTION IF YOU NEED TO FILTURE THINGS OUT BASED ON CALLSIGN\nvar foundbadge = callsign.match(regexBadge);\nif (foundbadge != null) {\n    callsign = foundbadge[0];\n    msg.url = baseURL + callsign + latURL + lat + lonURL + lon;\n    msg.method = \"get\";\n    return msg;\n} else {};\n}*/\n\nmsg.url = baseURL + callsign + latURL + lat + lonURL + lon;\nreturn msg;",
            "outputs": 1,
            "noerr": 0,
            "initialize": "",
            "finalize": "",
            "libs": [],
            "x": 790,
            "y": 360,
            "wires": [
                [
                    "155006bc945616ab"
                ]
            ]
        },
        {
            "id": "155006bc945616ab",
            "type": "change",
            "z": "9fbaf39c92cd5d0d",
            "name": "Clean Up",
            "rules": [
                {
                    "t": "delete",
                    "p": "tak",
                    "pt": "msg"
                },
                {
                    "t": "delete",
                    "p": "payload",
                    "pt": "msg"
                }
            ],
            "action": "",
            "property": "",
            "from": "",
            "to": "",
            "reg": false,
            "x": 590,
            "y": 420,
            "wires": [
                [
                    "45fd473ad81f3786"
                ]
            ]
        },
        {
            "id": "45fd473ad81f3786",
            "type": "switch",
            "z": "9fbaf39c92cd5d0d",
            "name": "msg.url not empty",
            "property": "url",
            "propertyType": "msg",
            "rules": [
                {
                    "t": "nempty"
                }
            ],
            "checkall": "true",
            "repair": false,
            "outputs": 1,
            "x": 770,
            "y": 420,
            "wires": [
                [
                    "433c993b493c7be1"
                ]
            ]
        },
        {
            "id": "433c993b493c7be1",
            "type": "http request",
            "z": "9fbaf39c92cd5d0d",
            "name": "",
            "method": "GET",
            "ret": "txt",
            "paytoqs": false,
            "url": "",
            "persist": false,
            "insecureHTTPParser": false,
            "authType": "",
            "senderr": false,
            "headers": [],
            "x": 680,
            "y": 480,
            "wires": [
                [
                    "68a54dc05063b459"
                ]
            ]
        },
        {
            "id": "68a54dc05063b459",
            "type": "change",
            "z": "9fbaf39c92cd5d0d",
            "name": "Clean Up",
            "rules": [
                {
                    "t": "delete",
                    "p": "topic",
                    "pt": "msg"
                },
                {
                    "t": "delete",
                    "p": "connectKey",
                    "pt": "msg"
                },
                {
                    "t": "delete",
                    "p": "headers",
                    "pt": "msg"
                },
                {
                    "t": "delete",
                    "p": "responseUrl",
                    "pt": "msg"
                },
                {
                    "t": "delete",
                    "p": "redirectList",
                    "pt": "msg"
                }
            ],
            "action": "",
            "property": "",
            "from": "",
            "to": "",
            "reg": false,
            "x": 870,
            "y": 480,
            "wires": [
                []
            ]
        }
    ]
}
